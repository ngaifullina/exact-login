{"version":3,"sources":["features/profile/Profile.module.css","app/hooks.ts","features/userSlice.ts","features/login/Styles.js","features/login/Login.tsx","features/profile/Profile.jsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppSelector","useSelector","userCredentials","checkCredentials","login","password","userSlice","createSlice","name","initialState","disabledButton","reducers","loginChange","state","action","payload","passwordChange","selectPassword","user","selectLogin","isDisabled","actions","btn","light","dark","css","btnDefault","btnPrimary","styled","div","Login","dispatch","useDispatch","disabled","history","useHistory","Styles","value","onChange","event","target","type","placeholder","required","onClick","push","Profile","className","styles","card","App","exact","path","component","store","configureStore","reducer","userReduser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,KAAO,wB,sHCIZC,EAAkDC,I,QCFlDC,EACJ,cADIA,EAED,SAeZ,SAASC,EAAiBC,EAAeC,GACvC,OACED,IAAUF,GAAyBG,IAAaH,EAI7C,I,MAAMI,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAd0B,CAC1BL,MAAO,GACPC,SAAU,GACVK,gBAAgB,GAYhBC,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnBD,EAAMT,MAAQU,EAAOC,QACjBZ,EAAiBU,EAAMT,MAAOS,EAAMR,UACtCQ,EAAMH,gBAAiB,EAEvBG,EAAMH,gBAAiB,GAI3BM,eAAgB,SAACH,EAAOC,GACtBD,EAAMR,SAAWS,EAAOC,QACpBZ,EAAiBU,EAAMT,MAAOS,EAAMR,UACtCQ,EAAMH,gBAAiB,EAEvBG,EAAMH,gBAAiB,MAMlBO,EAAiB,SAACJ,GAAD,OAAsBA,EAAMK,KAAKb,UAClDc,EAAc,SAACN,GAAD,OAAsBA,EAAMK,KAAKd,OAC/CgB,EAAa,SAACP,GAAD,OAAsBA,EAAMK,KAAKR,gBACpD,EAAwCJ,EAAUe,QAA1CT,EAAR,EAAQA,YAAaI,EAArB,EAAqBA,eAEbV,IAAf,Q,gBCrDMgB,EAAM,SAACC,EAAOC,GAAR,OAAiBC,YAAhB,IAAD,wgBAU0BF,EAAUC,EAC1BA,EAEkBD,EAAUC,EAERD,EAAUC,IAY9CE,EAAaD,YAAH,+CACZH,EAAI,UAAW,YAGbK,EAAaL,EAAI,UAAW,WAEnBM,MAAOC,IAAtB,i7CAyDUF,EAGAD,G,OCnFH,SAASI,IACd,IAAMC,EHT4BC,cGU5B5B,EAAQJ,EAAemB,GACvBd,EAAWL,EAAeiB,GAC1BgB,EAAWjC,EAAeoB,GAC5Bc,EAAUC,cAcd,OACE,cAACC,EAAD,UACE,iCACE,8BACE,uBACEC,MAAOjC,EACPkC,SAlBV,SAA2BC,GACzBR,EAASnB,EAAY2B,EAAMC,OAAOH,SAkB1BI,KAAK,QACLC,YAAY,QACZC,UAAQ,MAGZ,8BACE,uBACEN,MAAOhC,EACPiC,SAvBV,SAA8BC,GAC5BR,EAASf,EAAeuB,EAAMC,OAAOH,SAuB7BI,KAAK,WACLC,YAAY,WACZC,UAAQ,MAGZ,wBAAQF,KAAK,SAASR,SAAUA,EAAUW,QAzBhD,WACEV,EAAQW,KAAK,aAwBT,iD,qBCjDD,SAASC,IACd,OACE,qBAAKC,UAAWC,IAAOC,KAAvB,SACE,6BAAK/C,M,YCWIgD,MAbf,WACE,OACE,qBAAKH,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,cAAC,IAAD,CAAOqB,OAAK,EAACE,UAAWP,EAASM,KAAK,qBCPnCE,EAAQC,YAAe,CAClCC,QAAS,CACPtC,KAAMuC,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e3b96878.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Profile_card__1Ldrf\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../app/store\";\n\nexport const userCredentials = {\n  login: \"developer21\",\n  password: \"123456\",\n};\n\nexport type State = {\n  login: string;\n  password: string;\n  disabledButton: boolean;\n};\n\nconst initialState: State = {\n  login: \"\",\n  password: \"\",\n  disabledButton: true,\n};\n\nfunction checkCredentials(login: string, password: string) {\n  return (\n    login === userCredentials.login && password === userCredentials.password\n  );\n}\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    loginChange: (state, action: PayloadAction<string>) => {\n      state.login = action.payload;\n      if (checkCredentials(state.login, state.password)) {\n        state.disabledButton = false;\n      } else {\n        state.disabledButton = true;\n      }\n    },\n\n    passwordChange: (state, action: PayloadAction<string>) => {\n      state.password = action.payload;\n      if (checkCredentials(state.login, state.password)) {\n        state.disabledButton = false;\n      } else {\n        state.disabledButton = true;\n      }\n    },\n  },\n});\n\nexport const selectPassword = (state: RootState) => state.user.password;\nexport const selectLogin = (state: RootState) => state.user.login;\nexport const isDisabled = (state: RootState) => state.user.disabledButton;\nexport const { loginChange, passwordChange } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import styled, { css } from \"styled-components\";\n\nconst btn = (light, dark) => css`\n  white-space: nowrap;\n  display: inline-block;\n  border-radius: 5px;\n  padding: 5px 15px;\n  font-size: 16px;\n  color: white;\n  &:visited {\n    color: white;\n  }\n  background-image: linear-gradient(${light}, ${dark});\n  border: 1px solid ${dark};\n  &:hover {\n    background-image: linear-gradient(${light}, ${dark});\n    &[disabled] {\n      background-image: linear-gradient(${light}, ${dark});\n    }\n  }\n  &:visited {\n    color: black;\n  }\n  &[disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`;\n\nconst btnDefault = css`\n  ${btn(\"#ffffff\", \"#d5d5d5\")} color: #555;\n`;\n\nconst btnPrimary = btn(\"#4f93ce\", \"#285f8f\");\n\nexport default styled.div`\n  font-family: sans-serif;\n  & > div {\n    text-align: center;\n  }\n\n  form {\n    max-width: 500px;\n    margin: 10px auto;\n    border: 1px solid #ccc;\n    padding: 20px;\n    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);\n    border-radius: 3px;\n\n    & > div {\n      display: flex;\n      flex-flow: row nowrap;\n      line-height: 2em;\n      margin: 5px;\n      & > label {\n        color: #333;\n        width: 110px;\n        font-size: 1em;\n        line-height: 32px;\n      }\n      & > input,\n      & > select,\n      & > textarea {\n        flex: 1;\n        padding: 3px 5px;\n        font-size: 1em;\n        margin-left: 15px;\n        border: 1px solid #ccc;\n        border-radius: 3px;\n      }\n      & > input[type=\"checkbox\"] {\n        margin-top: 7px;\n      }\n      & > div {\n        margin-left: 16px;\n        & > label {\n          display: block;\n          & > input {\n            margin-right: 3px;\n          }\n        }\n      }\n    }\n    & > .buttons {\n      display: flex;\n      flex-flow: row nowrap;\n      justify-content: center;\n      margin-top: 15px;\n    }\n    button {\n      margin: 0 21px;\n      &[type=\"submit\"] {\n        ${btnPrimary};\n      }\n      &[type=\"button\"] {\n        ${btnDefault};\n      }\n    }\n    pre {\n      border: 1px solid #ccc;\n      background: rgba(0, 0, 0, 0.1);\n      box-shadow: inset 1px 1px 3px rgba(0, 0, 0, 0.2);\n      padding: 20px;\n    }\n  }\n`;\n","import { ChangeEvent } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport {\n  loginChange,\n  passwordChange,\n  selectLogin,\n  selectPassword,\n  isDisabled,\n} from \"../userSlice\";\nimport Styles from \"./Styles\";\n\nexport function Login() {\n  const dispatch = useAppDispatch();\n  const login = useAppSelector(selectLogin);\n  const password = useAppSelector(selectPassword);\n  const disabled = useAppSelector(isDisabled);\n  let history = useHistory();\n\n  function handleLoginChange(event: ChangeEvent<HTMLInputElement>) {\n    dispatch(loginChange(event.target.value));\n  }\n\n  function handlePasswordChange(event: ChangeEvent<HTMLInputElement>) {\n    dispatch(passwordChange(event.target.value));\n  }\n\n  function handleClick() {\n    history.push(\"/profile\");\n  }\n\n  return (\n    <Styles>\n      <form>\n        <div>\n          <input\n            value={login}\n            onChange={handleLoginChange}\n            type=\"login\"\n            placeholder=\"Login\"\n            required\n          />\n        </div>\n        <div>\n          <input\n            value={password}\n            onChange={handlePasswordChange}\n            type=\"password\"\n            placeholder=\"password\"\n            required\n          />\n        </div>\n        <button type=\"submit\" disabled={disabled} onClick={handleClick}>\n          Войти\n        </button>\n      </form>\n    </Styles>\n  );\n}\n","import { userCredentials } from \"../userSlice\";\nimport styles from \"./Profile.module.css\";\n\nexport function Profile() {\n  return (\n    <div className={styles.card}>\n      <h1>{userCredentials.login}</h1>\n    </div>\n  );\n}\n","import { Login } from \"./features/login/Login\";\nimport { Profile } from \"./features/profile/Profile\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route exact component={Profile} path=\"/profile\" />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport userReduser from \"../features/userSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: userReduser,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}